#set($h1 = '#')
#set($h2 = '##')
#set($h3 = '###')
#set($h4 = '####')
#set($h5 = '#####')
<head>
    <title>Using IDVKey APIs</title>
</head>

$h2 Setup

Before you can use any of the API, you will need to:

1) install the [IDVKey app](https://www.idvkey.com/)

2) Register it and login to the [IDVKey Portal](https://portal.idvkey.com)

3) Register your website

4) Create an api key

$h2 SDKs

The easiest way to use the APIs is to use one of our SDK (Software Development Kit):

* [Java](http://www.idvkey.com/support/dev/sdk/idvkey-sdk-java/index.html)

If your platform isn't supported by one of our development kits, you will need to write code to perform the HTTP rest operations,
as well as it's security.

In order to do so please see [API Security](api-security.html) for details on how to implement the REST security

And you'll find details on the REST APIs themselves in our [low-level REST API Documentation](raml/idvkey.html) which is based
on the RAML format (you can also [download the "raw" RAML files](raml/idvkey-raml.zip))

$h2 Notification operations

IDVKey allows you to send various types of notifications to a user to which (s)he will be able to (optionally) respond. In order to send a
notification to a user, (s)he will first need to approve linking his IDVKey to your service/website (this will be done
automatically if you use IDVKey identification rather than pre-identified authentication).

There are several kinds of notifications that you can use:

- Authentication notifications will be used to securely authenticate a user.

- Approval notifications will be used to display some text to the user (what he's approving), and give him the options to either approve or deny.

- Generic notifications will in addition to display a text to user allow you to customize what buttons or menu options will be displayed to the user,
as well as allowing to use confirmation dialogs and post-selection messages.

If you are sending a notification that doesn't require your service/website to wait for the user to respond, you just need to invoke the approve REST API to send the notification you want.

If your service is specifically a website and you need it to wait until your user has responded to the notification, just set the callbackUrl
parameter to a page on your website where the user will be redirected to after responding to the notification. This will cause
the operation result to include a redirectUrl where you should redirect (using http 302) the user to.

Once the user has responded to the notification, he will be redirected to the callbackUrl url you specified, with the query parameter 'opId' appended to it (this
will match the opId value you received when you originally sent the notification). You will then be able to invoke the corresponding REST API to find out what
the response of the user was (or alternatively that he cancelled it or that the operation timed out)

*IMPORTANT NOTE*: When you are using idvkey to require the user to approve something, it is of vital importance that whatever he is approving is protected
from tampering.

Generally this will require data that was used to initiate a notification to be retained and then subsequently used once the user has responded. You should
NOT use the callbackUrl to transfer this data between the two steps since that is very vulnerable to tampering in various ways.

Instead we strongly recommend that you keep this data server-side (in a transient web session or in a database).

$h4 Linking a user to your website/service

Before a user can use his IDVKey with your website/service he will need to approve linking it to your website/service.

If you are using the full authentication delegation model documentation below, this will be done automatically. Otherwise you
will need to need to do so manually this way:

Java:

```
String websiteId = "7KHEOMKNCZASPIRFCI7VAKW5PI";
String userRef = "exampleusername";
URL callbackUrl = new URL("https://mysite.com/confirmidvkeyauth");
URL cancelUrl = new URL("https://mysite.com/");
OperationResult linkOperationResult = apiClient.linkUser(websiteId, callbackUrl, userRef, cancelUrl);
```

REST

```
POST /api/services/7KHEOMKNCZASPIRFCI7VAKW5PI

{
"userRef": "exampleusername",
"url": "https://mysite.com/confirmidvkeyauth",
"cancelUrl": "https://mysite.com/"
}
Accept: application/json

HTTP/1.0 200 OK
Content-Type: application/json

{
"opId": "jeUHkBmqQnq3rZXCA5RBZLtWkx3vhZbvurRfXOAcDPloABhJ17exFHA",
"redirectUrl": "https://portal.idvkey.com/linktoservice.xhtml?token=jeUHkBmqQnq3rZXCA5RBZLtWkx3vhZbvurRfXOAcDPloABhJ17exFHA&url=http%3A%2F%2Fmywebsite.com%3A53822%2Fpublic%2Fmywebsite&cancelUrl=http%3A%2F%2Fmywebsite.com%3A53822%2Fpublic%2FcancelUrl"
}
```

You will then need to redirect the user to the redirectUrl returned by IDVKey. After the user has completed the approval he will be forwarded to the url you provided where you will
need to check if the user has approved or denied the authentication.

Java:

```
ServiceLinkRequestStatus linkStatus = apiClient.getServiceLinkRequestStatus(websiteId, linkOperationResult.getOpId());
if( linkStatus == ServiceLinkRequestStatus.ACCEPTED ) {
// update your user db to indicate the user is now linked using the userRef you provided
}
```

REST:

```
GET /api/services/7KHEOMKNCZASPIRFCI7VAKW5PI/links/requests/jeUHkBmqQnq3rZXCA5RBZLtWkx3vhZbvurRfXOAcDPloABhJ17exFHA

HTTP/1.0 200 OK
Content-Type: application/json

{
"state": "ACCEPTED",
"userRef": "exampleusername"
}
```

$h4 Authentication

The authentication operation will allow you to request a user to authenticate himself with your website.

Before a user can use IDVKey to approve authentication, he will need to be identified which is typically done through
username/password login. This is done not just to identify who the user is but also to protect him from being randomly
"spammed" authentication requests by any malicious party.

User identification can be done either by IDVKey or by the website/service. We recommend the former which is more convenient
for the user (only one password to remember and he can use rememberme on IDVKey), and easier integration (service link is automatically created).

$h5 Option 1: IDVKey identification

So for example using the Java SDK, you would write

```
OperationResult operationResult = apiClient.authenticateUser(serviceId, new URL("https://mysite.com/confirmidvkeyauth"), new URL("https://mysite.com/index.html"), null)
```

or as a REST operation

```
POST /api/services/ASDFJDFSUJI8ASDF2ASDFJI54A/notifications/authentication HTTP/1.0
Content-Type: application/json
Accept: application/json

{
"callbackUrl": "https://mysite.com/confirmidvkeyauth",
"cancelUrl": "https://mysite.com/index.html"
}

HTTP/1.0 200 OK
Content-Type: application/json

{
"opId": "jeUHkBmqQnq3rZXCA5RBZLtWkx3vhZbvurRfXOAcDPloABhJ17exFHA",
"redirectUrl": "https://portal.idvkey.com/auth.xhtml?token=jeUHkBmqQnq3rZXCA5RBZLtWkx3vhZbvurRfXOAcDPloABhJ17exFHA&url=http%3A%2F%mysite.com%3A53822%2Fconfirmidvkeyauth&cancelUrl=http%3A%2F%mysite.com%3A53822%2Findex.html"
}
```

This operation will return the operation id and redirect url


You could then just redirect the user to the URL specified in redirectUrl. For example in java servlet API this would be

```
httpServletRequest.sendRedirect(operationResult.getRedirectUrl().toString());
```

The user will then be request to approve authentication if he already has linked himself to your service, or to approve linking to your service otherwise.

Once he's done so, he will be redirected to the callback url you specified, appended with opId as a query parameter. So
for the above examples he would be redirected to `https://mysite.com/confirmidvkeyauth?opId=jeUHkBmqQnq3rZXCA5RBZLtWkx3vhZbvurRfXOAcDPloABhJ17exFHA`

At this point you would need to check if the user has approved authentication, and which is his user reference:

Java:

```
AuthenticationStatus status = apiClient.getAuthenticationStatus(authOpId,false);
```

REST

```
GET /api/notifications/authentication/jeUHkBmqQnq3rZXCA5RBZLtWkx3vhZbvurRfXOAcDPloABhJ17exFHA HTTP/1.0
Accept: application/json

HTTP/1.0 200 OK
Content-Type: application/json

{
"status": "ACCEPTED",
"userRef": "idvkey-fdsu832rjsdalf3894"
}
```

If the authentication has been approved, you should then check your database for which user "userRef" corresponds.

If you cannot find a corresponding user, you should ask the user if he already has a user (in which case
require him to authenticate that user using your current authentication method) or if he wants to create a new user.

In the future we will provide you the ability to change that userRef to allow you to change it be the same as the
username the user has on your website.

$h5 Option 2: Website/Service identification

In this scenario you will need to have the user already linked to your website/service.

Then when you a user tries to access your website/service, identify him (for example using his username/password) and then
then authentication API as described in option 1, with the difference being that you'll need to add the userRef
you assigned during service link.

Java:

```
OperationResult operationResult = apiClient.authenticateUser(serviceId, new URL("https://mysite.com/confirmidvkeyauth"), new URL("https://mysite.com/index.html"), "my-user-ref")
```

or as a REST operation

```
POST /api/services/ASDFJDFSUJI8ASDF2ASDFJI54A/notifications/authentication HTTP/1.0
Content-Type: application/json
Accept: application/json

{
"callbackUrl": "https://mysite.com/confirmidvkeyauth",
"cancelUrl": "https://mysite.com/index.html",
"userRef": "my-user-ref"
}

HTTP/1.0 200 OK
Content-Type: application/json

{
"opId": "jeUHkBmqQnq3rZXCA5RBZLtWkx3vhZbvurRfXOAcDPloABhJ17exFHA",
"redirectUrl": "https://portal.idvkey.com/auth.xhtml?token=jeUHkBmqQnq3rZXCA5RBZLtWkx3vhZbvurRfXOAcDPloABhJ17exFHA&url=http%3A%2F%mysite.com%3A53822%2Fconfirmidvkeyauth&cancelUrl=http%3A%2F%mysite.com%3A53822%2Findex.html"
}
```

Additionally when checking for the authentication status, you will need to specify that it's been pre-identified.

```
AuthenticationStatus status = apiClient.getAuthenticationStatus(authOpId,true);
```

REST

```
GET /api/notifications/authentication/jeUHkBmqQnq3rZXCA5RBZLtWkx3vhZbvurRfXOAcDPloABhJ17exFHA?preId=true HTTP/1.0
Accept: application/json

HTTP/1.0 200 OK
Content-Type: application/json

{
"status": "ACCEPTED",
"userRef": "idvkey-fdsu832rjsdalf3894"
}
```

$h4 Approval

You can use this operation to request a user to approve a sensitive operation.

For example if your user was going to make a transfer in a banking website:

Java

```
URL callbackUrl = new URL("https://mysite.com/dorequesttask.html");
URL cancelUrl = new URL("https://mysite.com/dorequesttask.html?cancel=true");
String approvalTitle = "Confirm cash transfer";
String approvalText = "Please confirm transfer of "+transferRequest.getAmount()+" from account "+transferRequest.getFrom()+" to "+transferRequest.getTo());
ApprovalRequest approvalRequest = new ApprovalRequest(websiteId, userRef, callbackUrl, cancelUrl, approvalTitle, approvalText);
OperationResult operationResult = apiClient.requestApproval(approvalRequest);
```

REST

```
POST /api/notifications/approval HTTP/1.0
Content-Type: application/json
Accept: application/json

{
"serviceId": "ASDFJDFSUJI8ASDF2ASDFJI54A",
"userRef": "idvkey-fdsu832rjsdalf3894",
"callbackUrl": "https://mysite.com/dorequesttask.html",
"cancelUrl": "https://mysite.com/dorequesttask.html?cancel=true",
"title": "Confirm cash transfer",
"text": "Please confirm transfer of 1000 USD from account 243792834 to 974239847
}

HTTP/1.0 200 OK
Content-Type: application/json

{
"opId": "rj2839jsldkrfj8932wrjolsdfu93284lkursd8ru",
"redirectUrl": "https://portal.idvkey.com/operation.xhtml?token=rj2839jsldkrfj8932wrjolsdfu93284lkursd8ru&url=http%3A%2F%mysite.com%3A53822%2Fconfirmidvkeyauth&cancelUrl=http%3A%2F%mysite.com%3A53822%2Findex.html"
}
```

As mentioned above it is important that you store the details of what operation you are approve in a secure manner, so
for example in java we could store that in the servlet session

```
httpServletRequest.getSession().setAttribute("idvkeyop-"+operationResult.getOpId(),transferRequest);
```

You then proceed to redirect the user to the url provided, and eventually the user browser will be redirected to your
callback url, at which point you will need to check if the user has approved the operation or not:

Java

```
String opId = JSFUtils.getHttpRequest().getParameter("opId");
ApprovalRequestStatus approvalState = apiClient.getApprovalState(opId);
if( approvalState.getState() == ApprovalRequestStatus.State.APPROVED ) {
TransferRequest transferRequest = (TransferRequest) httpServletRequest.getSession().getAttribute("idvkeyop-"+opId);
if(transferRequest == null) {
throw new IllegalArgumentException("Invalid opId");
} else {
transferService.doTransfer(transferRequest)
httpServletRequest.getSession().removeAttribute("idvkeyop-"+opId);
}
} else {
httpServletRequest.sendRedirect("/index.html");
}
```

REST

```
GET /api/notifications/approval/rj2839jsldkrfj8932wrjolsdfu93284lkursd8ru HTTP/1.0
Accept: application/json

HTTP/1.0 200 OK
Content-Type: application/json

{
"state": "ACCEPTED"
}
```

$h5 Generic

Generic notification are extremely powerful and highly customizable.

In addition to displaying a message to the user (as an approval does), you will be able to define whatever buttons or
menu options you want.

Additionally you will be able to add confirmation dialogs when a user click on one of those action button/menu, and a post-selection message dialog.

In the future you will also have the ability to request the user to input information as part of his response.

Also unlike approval and authentication (which has a short expiry time), and implement notifications your user
will receive even if he's not currently interacting with you website at that moment.

Java:

```
URL dummyUrl = new URL("http://dummy");
GenericNotificationRequest.Action action1 = new GenericNotificationRequest.Action("ok", "I did that transaction", "green", null, null, GenericNotificationRequest.Location.MAIN_BUTTON);
GenericNotificationRequest.Action action2 = new GenericNotificationRequest.Action("fraud", "I did not do that transaction", "red", null, "Our fraud team will contact you shortly", GenericNotificationRequest.Location.MAIN_BUTTON);
apiClient.sendGenericNotification(websiteId, new GenericNotificationRequest(userCtx.getLinkedUserRef(), dummyUrl,
dummyUrl, "Credit card fraud alert", "One of the transactions on your credit card might have been fraudulent, please confirm you paid 50$ at ARCO PETROL STATION in san francisco", null, null, action1, action2));
```
